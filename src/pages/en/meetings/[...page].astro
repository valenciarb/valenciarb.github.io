---
export const prerender = true;
import { getLangFromUrl, useTranslations } from '../../../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

import Meeting from "../../../components/Meeting.astro";
import PageLayout from "../../../layouts/PageLayout.astro";
import Pagination from "../../../components/Pagination.astro";

const allMeetings = await Astro.glob('./*.md*');
// @ts-ignore
export async function getStaticPaths({ paginate }) {
  // @ts-ignore
  const allMeetings = await Astro.glob('./*.md*');

    return paginate(allMeetings.reverse(), {
        pageSize: 5,
    })
}
const { page } = Astro.props;
const pathname = new URL(Astro.request.url).pathname.split('/');
const firstPath = `${pathname[1]}`;
const dateOptions: Intl.DateTimeFormatOptions = {
  weekday: "long",
  year: "numeric",
  month: "long",
  day: "numeric"
};
---
{firstPath}
<PageLayout title="Meetings">
  <h1 class="title is-red">{t("header.nav.previous")}</h1>
  {page.data.map((meeting: { frontmatter: { date: string; title: string }; compiledContent: () => string }) =>
  // @ts-ignore
  <Meeting
    date={new Date(meeting.frontmatter.date).toLocaleDateString(lang, dateOptions)}
    date_time={meeting.frontmatter.date}
    title=`<a href="${meeting.url}">${meeting.frontmatter.title}</a>`>
  </Meeting>
  )}
  {allMeetings.length > 1 ? (
            <div class="mt-4">
                <Pagination length={page.lastPage}
                            currentUrl={page.url.current}
                            currentPage={page.currentPage}
                            firstUrl={`/${firstPath}`}
                            prevUrl={page.url.prev}
                            nextUrl={page.url.next}
                            lastUrl={`/${firstPath}/${page.lastPage}`}
                />
            </div>
    ) : null}
</PageLayout>
